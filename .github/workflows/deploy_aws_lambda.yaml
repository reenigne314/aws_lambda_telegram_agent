name: Deploy Telegram Agent to AWS Lambda

on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: telegram_bot_agent           # set this to your Amazon ECR repository name

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy Lambda function with container image
        uses: aws-actions/aws-lambda-deploy@v1.1.0
        with:
          function-name: telegram-agent-lambda
          package-type: Image
          image-uri: ${{ steps.build-image.outputs.image }}
          role: ${{ secrets.AWS_LAMBDA_EXECUTION_ROLE }}
          environment: '{"OPENAI_API_KEY":"${{ secrets.OPENAI_API_KEY }}","ELEVENLABS_API_KEY":"${{ secrets.ELEVENLABS_API_KEY }}","TELEGRAM_BOT_TOKEN":"${{ secrets.TELEGRAM_BOT_TOKEN }}","TELEGRAM_WEBHOOK_ENDPOINT":"${{ secrets.TELEGRAM_WEBHOOK_ENDPOINT }}","MONGODB_CONNECTION_STRING":"${{ secrets.MONGODB_CONNECTION_STRING }}","COMET_API_KEY":"${{ secrets.COMET_API_KEY }}","QDRANT_API_KEY":"${{ secrets.QDRANT_API_KEY }}","QDRANT_URL":"${{ secrets.QDRANT_URL }}", "OPIK_CONFIG_PATH": "/tmp/.opik.config"}'
          timeout: 180
          memory-size: 1024
